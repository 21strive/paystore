// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: operation/paystore.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Paystore_CreateBalance_FullMethodName     = "/paystore.Paystore/CreateBalance"
	Paystore_CreatePayment_FullMethodName     = "/paystore.Paystore/CreatePayment"
	Paystore_FinalizedPayment_FullMethodName  = "/paystore.Paystore/FinalizedPayment"
	Paystore_CreateWithdraw_FullMethodName    = "/paystore.Paystore/CreateWithdraw"
	Paystore_FinalizedWithdraw_FullMethodName = "/paystore.Paystore/FinalizedWithdraw"
)

// PaystoreClient is the client API for Paystore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaystoreClient interface {
	CreateBalance(ctx context.Context, in *CreateBalanceRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	FinalizedPayment(ctx context.Context, in *FinalizedPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreatedResponse, error)
	FinalizedWithdraw(ctx context.Context, in *FinalizedWithdrawRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type paystoreClient struct {
	cc grpc.ClientConnInterface
}

func NewPaystoreClient(cc grpc.ClientConnInterface) PaystoreClient {
	return &paystoreClient{cc}
}

func (c *paystoreClient) CreateBalance(ctx context.Context, in *CreateBalanceRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, Paystore_CreateBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paystoreClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, Paystore_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paystoreClient) FinalizedPayment(ctx context.Context, in *FinalizedPaymentRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Paystore_FinalizedPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paystoreClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatedResponse)
	err := c.cc.Invoke(ctx, Paystore_CreateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paystoreClient) FinalizedWithdraw(ctx context.Context, in *FinalizedWithdrawRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Paystore_FinalizedWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaystoreServer is the server API for Paystore service.
// All implementations must embed UnimplementedPaystoreServer
// for forward compatibility.
type PaystoreServer interface {
	CreateBalance(context.Context, *CreateBalanceRequest) (*CreatedResponse, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatedResponse, error)
	FinalizedPayment(context.Context, *FinalizedPaymentRequest) (*EmptyResponse, error)
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreatedResponse, error)
	FinalizedWithdraw(context.Context, *FinalizedWithdrawRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedPaystoreServer()
}

// UnimplementedPaystoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaystoreServer struct{}

func (UnimplementedPaystoreServer) CreateBalance(context.Context, *CreateBalanceRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBalance not implemented")
}
func (UnimplementedPaystoreServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaystoreServer) FinalizedPayment(context.Context, *FinalizedPaymentRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedPayment not implemented")
}
func (UnimplementedPaystoreServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedPaystoreServer) FinalizedWithdraw(context.Context, *FinalizedWithdrawRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedWithdraw not implemented")
}
func (UnimplementedPaystoreServer) mustEmbedUnimplementedPaystoreServer() {}
func (UnimplementedPaystoreServer) testEmbeddedByValue()                  {}

// UnsafePaystoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaystoreServer will
// result in compilation errors.
type UnsafePaystoreServer interface {
	mustEmbedUnimplementedPaystoreServer()
}

func RegisterPaystoreServer(s grpc.ServiceRegistrar, srv PaystoreServer) {
	// If the following call pancis, it indicates UnimplementedPaystoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Paystore_ServiceDesc, srv)
}

func _Paystore_CreateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaystoreServer).CreateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paystore_CreateBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaystoreServer).CreateBalance(ctx, req.(*CreateBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paystore_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaystoreServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paystore_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaystoreServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paystore_FinalizedPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizedPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaystoreServer).FinalizedPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paystore_FinalizedPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaystoreServer).FinalizedPayment(ctx, req.(*FinalizedPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paystore_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaystoreServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paystore_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaystoreServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paystore_FinalizedWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizedWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaystoreServer).FinalizedWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Paystore_FinalizedWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaystoreServer).FinalizedWithdraw(ctx, req.(*FinalizedWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Paystore_ServiceDesc is the grpc.ServiceDesc for Paystore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paystore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paystore.Paystore",
	HandlerType: (*PaystoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBalance",
			Handler:    _Paystore_CreateBalance_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _Paystore_CreatePayment_Handler,
		},
		{
			MethodName: "FinalizedPayment",
			Handler:    _Paystore_FinalizedPayment_Handler,
		},
		{
			MethodName: "CreateWithdraw",
			Handler:    _Paystore_CreateWithdraw_Handler,
		},
		{
			MethodName: "FinalizedWithdraw",
			Handler:    _Paystore_FinalizedWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operation/paystore.proto",
}
